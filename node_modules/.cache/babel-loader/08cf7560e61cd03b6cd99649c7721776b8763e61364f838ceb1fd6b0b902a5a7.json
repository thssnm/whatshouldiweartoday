{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from \"react-query\";\nimport { normalize } from \"./normalize\";\nexport const useWeatherInfo = location => {\n  _s();\n  console.log(\"useWeatherInfo:\", location);\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"users\", () => {\n    const searchParam = typeof location === \"string\" ? \"q=\" + location : \"lat=\" + location.latitude + \"&lon=\" + location.longitude;\n    console.log(\"fetch:\", location, searchParam);\n    return fetch(\"https://api.openweathermap.org/data/2.5/weather?\" + searchParam + \"&appid=cf61ba7bba440089d7c442c97d356595\").then(res => res.json()).then(data => normalize(data));\n  });\n  console.log(\"weatherData:\", data);\n  return {\n    weather: data,\n    error,\n    isLoading\n  };\n};\n_s(useWeatherInfo, \"P7jBIA24rc00P7RvfXjpVl6dqRI=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","normalize","useWeatherInfo","location","_s","console","log","isLoading","error","data","searchParam","latitude","longitude","fetch","then","res","json","weather"],"sources":["/Users/matthiastheissen/Desktop/Privat/WhatShouldIWearTodayPwa/what-should-i-wear-today/src/hooks/useWeatherInfo.ts"],"sourcesContent":["import { useQuery } from \"react-query\";\nimport { normalize } from \"./normalize\";\nimport React from \"react\";\n\ntype Location = { latitude: number; longitude: number };\n\nexport const useWeatherInfo = (location: Location | string) => {\n  console.log(\"useWeatherInfo:\", location);\n  const { isLoading, error, data } = useQuery(\"users\", () => {\n    const searchParam =\n      typeof location === \"string\"\n        ? \"q=\" + location\n        : \"lat=\" + location.latitude + \"&lon=\" + location.longitude;\n    console.log(\"fetch:\", location, searchParam);\n    return fetch(\n      \"https://api.openweathermap.org/data/2.5/weather?\" +\n        searchParam +\n        \"&appid=cf61ba7bba440089d7c442c97d356595\"\n    )\n      .then((res) => res.json())\n      .then((data) => normalize(data));\n  });\n\n  console.log(\"weatherData:\", data);\n\n  return {\n    weather: data,\n    error,\n    isLoading,\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,SAAS,QAAQ,aAAa;AAKvC,OAAO,MAAMC,cAAc,GAAIC,QAA2B,IAAK;EAAAC,EAAA;EAC7DC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,QAAQ,CAAC;EACxC,MAAM;IAAEI,SAAS;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGT,QAAQ,CAAC,OAAO,EAAE,MAAM;IACzD,MAAMU,WAAW,GACf,OAAOP,QAAQ,KAAK,QAAQ,GACxB,IAAI,GAAGA,QAAQ,GACf,MAAM,GAAGA,QAAQ,CAACQ,QAAQ,GAAG,OAAO,GAAGR,QAAQ,CAACS,SAAS;IAC/DP,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,QAAQ,EAAEO,WAAW,CAAC;IAC5C,OAAOG,KAAK,CACV,kDAAkD,GAChDH,WAAW,GACX,yCACJ,CAAC,CACEI,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEL,IAAI,IAAKR,SAAS,CAACQ,IAAI,CAAC,CAAC;EACpC,CAAC,CAAC;EAEFJ,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEG,IAAI,CAAC;EAEjC,OAAO;IACLQ,OAAO,EAAER,IAAI;IACbD,KAAK;IACLD;EACF,CAAC;AACH,CAAC;AAACH,EAAA,CAxBWF,cAAc;EAAA,QAEUF,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}