{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from \"react-query\";\nimport { normalize } from \"./normalize\";\nconst fetchWeather = location => {\n  const searchParam = typeof location === \"string\" ? \"q=\" + location : \"lat=\" + location.latitude + \"&lon=\" + location.longitude;\n  console.log(\"fetch:\", location, searchParam);\n  return fetch(\"https://api.openweathermap.org/data/2.5/weather?\" + searchParam + \"&appid=cf61ba7bba440089d7c442c97d356595\").then(res => res.json()).then(data => normalize(data));\n};\nexport const useWeatherInfo = location => {\n  _s();\n  console.log(\"useWeatherInfo:\", location);\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(location.toString(), () => fetchWeather(location));\n  return {\n    weather: data,\n    error,\n    isLoading\n  };\n};\n_s(useWeatherInfo, \"P7jBIA24rc00P7RvfXjpVl6dqRI=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","normalize","fetchWeather","location","searchParam","latitude","longitude","console","log","fetch","then","res","json","data","useWeatherInfo","_s","isLoading","error","toString","weather"],"sources":["/Users/matthiastheissen/Desktop/Privat/WhatShouldIWearTodayPwa/what-should-i-wear-today/src/hooks/useWeatherInfo.ts"],"sourcesContent":["import { useQuery } from \"react-query\";\nimport { normalize } from \"./normalize\";\n\ntype Location = { latitude: number; longitude: number };\n\nconst fetchWeather = (location: Location | string) => {\n  const searchParam =\n    typeof location === \"string\"\n      ? \"q=\" + location\n      : \"lat=\" + location.latitude + \"&lon=\" + location.longitude;\n  console.log(\"fetch:\", location, searchParam);\n  return fetch(\n    \"https://api.openweathermap.org/data/2.5/weather?\" +\n      searchParam +\n      \"&appid=cf61ba7bba440089d7c442c97d356595\"\n  )\n    .then((res) => res.json())\n    .then((data) => normalize(data));\n};\n\nexport const useWeatherInfo = (location: Location | string) => {\n  console.log(\"useWeatherInfo:\", location);\n\n  const { isLoading, error, data } = useQuery(location.toString(), () =>\n    fetchWeather(location)\n  );\n\n  return {\n    weather: data,\n    error,\n    isLoading,\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,SAAS,QAAQ,aAAa;AAIvC,MAAMC,YAAY,GAAIC,QAA2B,IAAK;EACpD,MAAMC,WAAW,GACf,OAAOD,QAAQ,KAAK,QAAQ,GACxB,IAAI,GAAGA,QAAQ,GACf,MAAM,GAAGA,QAAQ,CAACE,QAAQ,GAAG,OAAO,GAAGF,QAAQ,CAACG,SAAS;EAC/DC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,QAAQ,EAAEC,WAAW,CAAC;EAC5C,OAAOK,KAAK,CACV,kDAAkD,GAChDL,WAAW,GACX,yCACJ,CAAC,CACEM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKZ,SAAS,CAACY,IAAI,CAAC,CAAC;AACpC,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIX,QAA2B,IAAK;EAAAY,EAAA;EAC7DR,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,QAAQ,CAAC;EAExC,MAAM;IAAEa,SAAS;IAAEC,KAAK;IAAEJ;EAAK,CAAC,GAAGb,QAAQ,CAACG,QAAQ,CAACe,QAAQ,CAAC,CAAC,EAAE,MAC/DhB,YAAY,CAACC,QAAQ,CACvB,CAAC;EAED,OAAO;IACLgB,OAAO,EAAEN,IAAI;IACbI,KAAK;IACLD;EACF,CAAC;AACH,CAAC;AAACD,EAAA,CAZWD,cAAc;EAAA,QAGUd,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}